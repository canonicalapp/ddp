name: Schema Sync

on:
  push:
    branches: [main, develop]
    paths:
      - 'schema.sql'
      - 'procs.sql'
      - 'triggers.sql'
  pull_request:
    branches: [main]
    paths:
      - 'schema.sql'
      - 'procs.sql'
      - 'triggers.sql'
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository'
        required: true
        default: ''
      target_repo:
        description: 'Target repository'
        required: true
        default: ''
      source_branch:
        description: 'Source branch'
        required: false
        default: 'main'
      target_branch:
        description: 'Target branch'
        required: false
        default: 'main'

jobs:
  schema-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.source_repo || github.repository }}
          ref: ${{ github.event.inputs.source_branch || github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: source

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.target_repo || github.repository }}
          ref: ${{ github.event.inputs.target_branch || 'main' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: target

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install DDP
        run: npm install -g ddp

      - name: Find schema files
        id: find-schemas
        run: |
          echo "Looking for schema files..."

          # Find source schema files
          if [ -f "source/schema.sql" ] && [ -f "source/procs.sql" ] && [ -f "source/triggers.sql" ]; then
            echo "source_dir=source" >> $GITHUB_OUTPUT
          elif [ -d "source/schema" ] && [ -f "source/schema/schema.sql" ] && [ -f "source/schema/procs.sql" ] && [ -f "source/schema/triggers.sql" ]; then
            echo "source_dir=source/schema" >> $GITHUB_OUTPUT
          elif [ -d "source/database" ] && [ -f "source/database/schema.sql" ] && [ -f "source/database/procs.sql" ] && [ -f "source/database/triggers.sql" ]; then
            echo "source_dir=source/database" >> $GITHUB_OUTPUT
          else
            echo "❌ Source schema files not found"
            exit 1
          fi

          # Find target schema files
          if [ -f "target/schema.sql" ] && [ -f "target/procs.sql" ] && [ -f "target/triggers.sql" ]; then
            echo "target_dir=target" >> $GITHUB_OUTPUT
          elif [ -d "target/schema" ] && [ -f "target/schema/schema.sql" ] && [ -f "target/schema/procs.sql" ] && [ -f "target/schema/triggers.sql" ]; then
            echo "target_dir=target/schema" >> $GITHUB_OUTPUT
          elif [ -d "target/database" ] && [ -f "target/database/schema.sql" ] && [ -f "target/database/procs.sql" ] && [ -f "target/database/triggers.sql" ]; then
            echo "target_dir=target/database" >> $GITHUB_OUTPUT
          else
            echo "❌ Target schema files not found"
            exit 1
          fi

      - name: Run schema sync
        run: |
          echo "🔄 Running schema sync..."
          ddp sync \
            --source-dir=${{ steps.find-schemas.outputs.source_dir }} \
            --target-dir=${{ steps.find-schemas.outputs.target_dir }} \
            --output=alter.sql

      - name: Check for changes
        id: changes
        run: |
          if [ -f "alter.sql" ] && [ -s "alter.sql" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📄 Schema changes detected:"
            cat alter.sql
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "✅ No schema changes detected"
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: schema sync changes'
          title: 'Schema Sync: ${{ github.event.inputs.source_repo || github.repository }} → ${{ github.event.inputs.target_repo || github.repository }}'
          body: |
            ## Schema Sync Changes

            This PR contains schema changes generated by DDP (Declarative Database Provisioning).

            **Source:** ${{ github.event.inputs.source_repo || github.repository }} (${{ github.event.inputs.source_branch || github.ref_name }})
            **Target:** ${{ github.event.inputs.target_repo || github.repository }} (${{ github.event.inputs.target_branch || 'main' }})

            ### Generated Files
            - `alter.sql` - Database migration script

            ### Review Required
            Please review the changes in `alter.sql` before merging. This script should be tested in a staging environment before applying to production.

            ### Next Steps
            1. Review the generated `alter.sql` file
            2. Test the migration in a staging environment
            3. Merge this PR when ready
            4. Deploy to production
          branch: schema-sync-${{ github.run_number }}
          delete-branch: true
          files: |
            alter.sql

      - name: Upload alter.sql as artifact
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: alter-sql-${{ github.run_number }}
          path: alter.sql
          retention-days: 30

      - name: Notify production
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "🚨 Schema changes detected and PR created"
          echo "Production team should be notified to review and deploy the changes"
          # Add your notification logic here (Slack, email, etc.)
